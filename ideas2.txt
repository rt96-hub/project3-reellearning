x track watched videos
- preload videos/stream
    - store download of prior x videos so you can go back??
- refactor?
x generate fake video data
    x name, description
    x tags
    x fake transcript
    x ai gen analysis of transcript and otherwise
- tag videos with subject
    - tag classes/feeds with interests and understanding
    - BASIC recommendation system from get videos
x generate video files
    x 10 seconds of video (same dimensions as my phone videos)
    x lower quality
    x just the title and description
    - make a thumbnail
- tag classes with subject too?
x build and deploy
x email verification on deployed??????

x script to remove # from all tags
    x videos.classification.explicit.hashtags
    x videoTags.tag
    x videoTags.relatedTags

- general recommendation system
    x create a vector for each video
    x when a video is liked for a user/class, 
        x it adds the vector to the user/class vector
        x it adds the tags to the user/class tag preferences map
    - when we call the load videos function, we do a combined scoring approach
        - score = alpha * vector similarity + beta * tag similarity
        - vector similarity is the cosine similarity between the user/class vector and the video vector
        - tag similarity is the cosine similarity between the user/class tag preferences and the video tags



- ai
    x ai generated onboarding??? (GOTTA BE FAST THO)
        x how does this seed the data?
        x get a list of the 20 most common tags, when you select a tag, it gets 5 more tags related to it, recursively
        x create an embedding of the tags, and when you select a tag, it gets the top 5 tags related to it (we can precalculate the 5 nearest neighbors and store them)
        x create a tag table, and when a new video is uploaded, if the tag doesn't exist, it creates it, otherwise it increments the count
        - eventually, we will run a nightly job to calculate the 5 nearest neighbors for all tags
        x these tags will be part of the recommendation system, basically looking at the users most liked tags and recommending videos within those and related tags
    x add similar onboarding when you create a class
        x maybe with a search?
    - ai generated progress report(what have you done over the last x days)
        x userProgressReport collection, progress report page
            x list of historical reports
            x generate new report button, last x days, weeks, hours, months, years
            x need to make the firestore rules allow for reading (creation is handled on the endpoint)
            x how to leave the modal before the report is finished, send a message when its done
                x really need to figure this out
                x make the purple color button less dark (changed text to white)
                x remove the timestamp from report page
                x classes table needs to be sized better, flex width (or list similar to the reports)
                x remove logging stuff 
                x blue math characters cycle left and right across the button
            x build out report detail function
                x properly query the data
                    x can I test locally with python?
                    x dont store the entire video data, maybe for the videos watched, we only store the time watched and the video title? or at least compare speed (or no actual video data at all, just the count of videos watched)
                x connect to openai to feed summary info
                    x how to set enviroment variables?
        x do one time generate report function first, then set up scheduled job to call those functions
        - every day, send a push notification? And you can look at a summary of the day? at 9 am of the next day
            x checks the day of week/month/year, then generates the report with 'daily', 'weekly', 'monthly', 'yearly' and appropriate start and end dates
            x "your mm/dd/yyyy summary"
            - how to schedule a job?? and then I need to figure out how to kick it off manually, and maybe shorten the duration we are checking
            x pulls user/class records, then sends the data to kick off other functions that generate reports parallel
        x look at (cloud function that pulls the below data from firestore, then runs it through an llm):
            x classes made
            x videos watched
            x videos liked
            x videos bookmarked
            x comments
            x replies/likes to your comments
            x understanding entries
    x ai generated class report for curators (what have the students been liking/comprehending)
        x classProgressReport collection
        x probably lives in the class page, maybe generated on a schedule still?
    - ai generated suggested reading or videos based on what the user has watched, maybe in the same tab as the progress report
        - or based on class
        - probably too general to be a daily report, and not something that needs to be recalced every time another video is liked
        - part of the progress report? too often? Maybe an attribute on the class, that get's run daily
        - agent or simple llm that somehow summarizes activity, and then uses the summary to query the web for relevant videos/articles/etc.
        - need to find a service that can easily query the web for relevant videos/books/articles
    - ai generated questions randomly in the feed, based on last x videos watched (depends on subject)
        x make sure videos are only marked as watched after 80% of the video is watched
        x the condition for questions is either 2 minutes watched, but they have to have watched at least 1 video (set to 30 seconds for testing)
        - how to make sure this runs async, so we don't have to wait for the ai to generate question while the user is watching videos
            - it will just insert the question into the feed when it gets a response
        - we will pick one video from the list of watched videos, and then generate a question about that video
        - add rules to allow user to modify the question
        - ADD QUESTIONS ANSWERED TO REPORT (NEED to get the questions in first though)
    - ai generated badges or achievements???
        - achievements screen
            - list of achievements
            - generate a fun achievement for every user
            - create them after so many videos watched, classes made, replies/likes, etc.
            - every achievement is unique, maybe a badge generated by AI model or something

        - badges/achievements page (NFT???)
    


- eventually
    - push notifications for the daily reports
    - greyed out screen while report is generating, until you tap the screen, apparently the tree isnt reloading until the screen is tapped???
    - search
    - dms
    - notifications
    - auto binary classification on video upload

- on userViews and bookmarks and likes
    - instead of an array of classIds, use a map of classId to timestamp of when the user watched/bookmarked/liked the video
- store on classMembership
    - somehow need to track leaving and joining dates 
    - maybe have to track it transactionally? the class document stores the actual incremented count, so it only has to be queried for the report
