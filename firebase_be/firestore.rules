rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Videos collection rules
    match /videos/{videoId} {
      // Allow anyone to read video documents
      allow read: if true;
      
      // Only allow authenticated users to create/update videos
      // Also allow updating engagement stats (likes)
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                   (
                     request.auth.uid == resource.data.creator.id ||
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['engagement'])
                   );
      
      // Only allow creator to delete their videos
      allow delete: if isAuthenticated() && 
                   request.auth.uid == resource.data.creator.id;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && 
                  request.auth.uid == userId;
    }

    // Pending users collection rules
    match /pending_users/{userId} {
      // Allow reading and deleting only their own pending data
      allow read, delete: if isAuthenticated() && 
                         request.auth.uid == userId;
      // Allow creating pending data during signup
      allow create: if true;
    }

    // Video Comments collection rules
    match /videoComments/{commentId} {
      // Anyone can read comments
      allow read: if true;
      
      // Only authenticated users can create comments
      allow create: if isAuthenticated();
      
      // Allow updates for replies and likes
      allow update: if isAuthenticated() && (
        // Author can update any field
        resource.data.author.uid == request.auth.uid ||
        // Any authenticated user can update specific fields for replies and likes
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['hasReplies', 'replyCount', 'replies', 'likeCount'])
      );
      
      // Only comment author can delete their comments
      allow delete: if isAuthenticated() && resource.data.author.uid == request.auth.uid;
    }

    // Comment Replies collection rules
    match /commentReplies/{replyId} {
      // Anyone can read replies
      allow read: if true;
      
      // Only authenticated users can create replies
      allow create: if isAuthenticated();
      
      // Allow updates for likes and edits
      allow update: if isAuthenticated() && (
        // Author can update content and metadata
        resource.data.author.uid == request.auth.uid ||
        // Any authenticated user can update likeCount
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount'])
      );
      
      // Only reply author can delete their replies
      allow delete: if isAuthenticated() && resource.data.author.uid == request.auth.uid;
    }

    // Comment Reply Likes collection rules
    match /commentReplyLikes/{likeId} {
      // Anyone can read likes
      allow read: if true;
      
      // Only authenticated users can create/delete their own likes
      // The likeId must be in format: "{userId}_{replyId}"
      allow create, delete: if isAuthenticated() &&
                          likeId.split('_')[0] == request.auth.uid;
      
      // No updates allowed on likes (they can only be created or deleted)
      allow update: if false;
    }

    // Comment Likes collection rules
    match /commentLikes/{likeId} {
      // Anyone can read likes
      allow read: if true;
      
      // Only authenticated users can create/delete their own likes
      // The likeId must be in format: "{userId}_{commentId}"
      allow create, delete: if isAuthenticated() &&
                          likeId.split('_')[0] == request.auth.uid;
      
      // No updates allowed on likes (they can only be created or deleted)
      allow update: if false;
    }

    // User Likes collection rules
    match /userLikes/{likeId} {
      // Anyone can read likes
      allow read: if true;
      
      // Only authenticated users can create/delete their own likes
      // The likeId must be in format: "{userId}_{videoId}"
      allow create: if isAuthenticated();
      
      allow delete, update: if isAuthenticated() &&
                          likeId.split('_')[0] == request.auth.uid;
    }

    // User Bookmarks collection rules
    match /userBookmarks/{bookmarkId} {
      // Anyone can read bookmarks
      allow read: if true;
      
      // Only authenticated users can create/delete their own bookmarks
      // The bookmarkId must be in format: "{userId}_{videoId}"
      allow create: if isAuthenticated();
      
      allow delete, update: if isAuthenticated() &&
                          bookmarkId.split('_')[0] == request.auth.uid;
    }

    // User Views collection rules
    match /userViews/{userViewId} {
      // Only allow creating view records if:
      // 1. User is authenticated
      allow create: if isAuthenticated()

      // No updates or deletes allowed on view records
      allow update, delete: if false;
    }

    // Video Comprehension collection rules
    match /videoComprehension/{docId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        docId.split('_')[0] == request.auth.uid && 
        request.resource.data.userId == resource.data.userId &&
        request.resource.data.videoId == resource.data.videoId &&
        request.resource.data.comprehensionLevel in ['not_understood', 'partially_understood', 'fully_understood'];
    }

    // Classes collection rules
    match /classes/{classId} {
      // Anyone can read class documents
      allow read: if true;
      
      // Only authenticated users can create classes
      allow create: if isAuthenticated();
      
      // Allow class creator to update/delete their classes
      // Also allow updating memberCount by any authenticated user
      allow update: if isAuthenticated() && 
                   (
                     request.auth.uid == resource.data.creator.id ||
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberCount'])
                   );
      
      allow delete: if isAuthenticated() && 
                   request.auth.uid == resource.data.creator.id;
    }

    // Class Membership collection rules
    match /classMembership/{membershipId} {
      // Anyone can read class membership
      allow read: if true;
      
      // Any authenticated user can create a membership
      allow create: if isAuthenticated();
      
      // Users can only update/delete their own memberships
      // The membershipId must be in format: "{userId}_{classId}"
      allow update, delete: if isAuthenticated() &&
                          membershipId.split('_')[0] == request.auth.uid;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}